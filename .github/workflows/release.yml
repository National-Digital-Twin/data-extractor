name: Publish to GHCR

on:
  push:
    branches:
      - main

jobs:
  verify:
    name: Verify the release code
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    env:
      MAVEN_CLI_OPTS: "--batch-mode --no-transfer-progress"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Java/Maven
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: "temurin"
          cache: maven
      - name: Test
        run: mvn $MAVEN_CLI_OPTS verify
      - name: Get version
        id: get-version
        run: echo version=$(./mvnw $MAVEN_CLI_OPTS help:evaluate -Dexpression=project.version -q -DforceStdout) >> $GITHUB_OUTPUT

  publish:
    name: Publish the release to GHCR
    needs: verify
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.verify.outputs.version }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

  tag:
    name: Create Git Tag
    needs:
      - verify
      - publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Tag commit
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
          
          TAG=v${{ needs.verify.outputs.version }}
          
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

  release-notes:
    name: Create GitHub Release
    permissions:
      contents: write
    needs:
      - verify
      - tag
    runs-on: ubuntu-latest
    steps:
      - name: Print version
        run: |
          echo "Creating Release for Version: v${{ needs.verify.outputs.version }}"
      - name: Generate Release Notes
        run: |
          echo "Automated release for version ${{ needs.verify.outputs.version }}.  " > ${{ runner.temp }}/release-notes.txt
          echo "" >> ${{ runner.temp }}/release-notes.txt
          echo "See the [changelog](https://github.com/$GITHUB_REPOSITORY/blob/v${{ needs.verify.outputs.version }}/CHANGELOG.md) for what has changed." >> ${{ runner.temp }}/release-notes.txt
      - name: Create Github Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.verify.outputs.version }}"
          name: "Release v${{ needs.verify.outputs.version }}"
          body_path: ${{ runner.temp }}/release-notes.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-into-develop:
    name: Merge release branch back into develop
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - verify
      - release-notes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Verify release branch exists
        id: exists
        run: |
          VERSION=${{ needs.verify.outputs.version }}
          echo "Checking that branch release/$VERSION exists"
          
          if [[ $(git ls-remote --exit-code --heads origin "refs/heads/release/$VERSION" ) ]]; then
            echo "✅ Release branch exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "branch_name=release/$VERSION" >> $GITHUB_OUTPUT
          else
            echo "❌ Release branch does not exist, skipping develop sync"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Configure git
        if: ${{ steps.exists.outputs.branch_exists == 'true' }}
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
      - name: Sync develop
        if: ${{ steps.exists.outputs.branch_exists == 'true' }}
        run: |
          git fetch origin develop
          git checkout develop
          git merge origin/${{ steps.exists.outputs.branch_name }} --no-edit || {
            echo "Merge conflict! Manual resolution required."
            exit 1
          }
          git push origin develop
      - name: Clean up branch
        if: ${{ steps.exists.outputs.branch_exists == 'true' }}
        run: |
          git push -d origin ${{ steps.exists.outputs.branch_name }}
